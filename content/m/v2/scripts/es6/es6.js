'use strict';var arr=[1,2,3,4,5,6,7];console.log(arr.map(function(c){return c+1}));var arr2=[1,2,3,4,5,6,7];console.log(arr2.filter(function(c){return c>3}));var arr3=[2,3,4,5,6,7];console.log(arr3.some(function(c){return c>8}));var set=new Set;set.add(1);set.add(1);set.add(2);set.has(3);var map=new Map;map.set('a',{});map.set('b',{v:1});map.set('a',2);map.has('a');function spred(){var _console;(_console=console).log.apply(_console,arguments)}spred(1,2,3,4);var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=map[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var item=_step.value;console.log(item)}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=set[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _item=_step2.value;console.log(_item)}}catch(err){_didIteratorError2=true;_iteratorError2=err}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return()}}finally{if(_didIteratorError2){throw _iteratorError2}}}var a=1;var b=2;var c=3;console.log(a,b,c);var _foo$bar={foo:1,bar:{v:1}};var foo=_foo$bar.foo;var bar=_foo$bar.bar;console.log(foo,bar);var blocks=[{a:1,b:2},{a:2,b:2},{a:3,b:3}];var sb='<ul>';blocks.forEach(function(item){sb+='<li>'+item.a+','+item.b+'</li>'});console.log(sb+'</ul>');console.log('git hook dev env');
